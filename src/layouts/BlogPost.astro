---
import { type CollectionEntry, render } from "astro:content";
import Masthead from "@/components/blog/Masthead.astro";
import TOC from "@/components/blog/TOC.astro";
import WebMentions from "@/components/blog/webmentions/index.astro";
import BaseLayout from "./Base.astro";
import SeriesPanel from "@/components/SeriesPanel.astro";
import { Icon } from "astro-icon/components";
import { getAllPosts } from "@/data/post";
import LikeButton from '@/components/blog/LikeButton.svelte'
import CommentsSection from '@/components/CommentsSection.svelte';
import RelatedPosts from "@/components/blog/RelatedPosts.astro";

interface Props {
	post: CollectionEntry<"post">;
}


const { post } = Astro.props;
const { ogImage, title, description, updatedDate, publishDate, seriesId } = post.data;
const allPosts = (await getAllPosts()).sort((a,b)=> a.data.publishDate.getTime()-b.data.publishDate.getTime());
const postId = post.id;
const postIndex = allPosts.findIndex(p => p.id === postId);
const [prevPost, nextPost] = [
  allPosts[postIndex - 1] ?? undefined,
  allPosts[postIndex + 1] ?? undefined
];

const socialImage = ogImage ?? `/og-image/${post.id}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings } = await render(post);
---

<BaseLayout meta={{ articleDate, description, ogImage: socialImage, title }}>

	<!-- SeriesPanel is inserted into the named slot "sidebar" -->
	{seriesId && (<SeriesPanel slot="sidebar" seriesId={seriesId} />)}

	<Masthead content={post} />
	
	<div class="mt-6 flex sm:grid-cols-[auto_1fr] md:items-start gap-x-8">
		<article class="grid flex-grow grid-cols-1 break-words pt-4" data-pagefind-body>
			<div class="text-textColor prose-h2:border-b-2 prose-h2:border-textColor/50 prose-h2:py-2 prose prose-citrus flex-grow prose-headings:font-bold  md:text-lg">
				<slot />
			</div>
			<WebMentions />
		</article>
		{!!headings.length && (
			<aside 
				id="toc-panel" 
				class="md:sticky md:top-20 z-10 hidden md:w-[14rem] md:min-w-[14rem] md:rounded-lg md:block"
			>
				<TOC headings={headings} />
			</aside>
		)}
	</div>

	<div class="left-0 right-12 z-50 ml-auto w-fit md:absolute">
		<button
			id="to-top-button"
			class="fixed bottom-14 flex h-12 w-12 text-light translate-y-28 items-center justify-center rounded-full bg-bgColor text-3xl drop-shadow-xl transition-all duration-300 hover:text-accent-two data-[show=true]:translate-y-0 data-[show=true]:opacity-100"
			aria-label="Back to Top"
			data-show="false"
		>	
			<span class="absolute inset-0 rounded-full bg-special-lighter flex items-center justify-center" aria-hidden="true">
				<svg
					class="h-6 w-6"
					fill="none"
					focusable="false"
					stroke="currentColor"
					stroke-width="2"
					viewBox="0 0 24 24"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
				</svg>
			</span>
		</button>
	</div>

	<!-- Series button for mobile screens -->
	{seriesId && (
		<mobile-button
			id="toggle-panel-mobile"
			class="size-12 flex items-center justify-center block sm:hidden fixed bottom-4 shadow-[0px_10px_25px_rgba(0,0,0,0.15)] border border-special-lighter left-4 z-50 rounded-lg bg-bgColor text-accent-base hover:text-bg-accent-base/90"
			aria-label="Toggle Series Panel"
		>
			<span class="absolute inset-0 rounded-lg flex items-center justify-center bg-special-light hover:text-accent-base/90">
				<Icon class="size-8" name="solar:notes-bold"/>
			</span>
		</mobile-button>
	)}
	
	<div class="mt-4 flex justify-between  gap-2 border-t-2 border-textColor/10 py-5">
		<div class="flex gap-2">
		<a href={`https://x.com/intent/tweet?text=${post.data.title}&url=${'https://kotablog.netlify.app/posts/'+post.id}&target="_blank"`}>
			
		<Icon name="mingcute:social-x-fill" class="size-10 p-2 rounded-full text-accent-one/50 bg-accent-one/10"></Icon>
		</a>
		<a href={`https://social-plugins.line.me/lineit/share?url=${'https://kotablog.netlify.app/posts/'+post.id}`}>
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" class="size-10 p-2 rounded-full text-accent-one/50 bg-accent-one/10">
				<path fill="currentColor" d="M8 .5c4.411 0 8 2.9 8 6.465c0 1.44-.563 2.746-1.723 3.991c-1.615 1.822-5.198 4.043-6.075 4.4c-.106.044-.346.144-.607.144a.77.77 0 0 1-.482-.154c-.356-.274-.284-.72-.256-.89l.106-.65c.039-.296.011-.391.006-.404c.014.038-.087-.019-.301-.063C2.821 12.84 0 10.156 0 6.965C0 3.401 3.589.5 8 .5M3.165 4.974c-.235 0-.43.19-.43.421v3.193c0 .23.195.42.43.42h1.627c.236 0 .43-.19.43-.42a.426.426 0 0 0-.43-.421H3.594V5.395a.426.426 0 0 0-.429-.42zm2.88 0c-.237 0-.43.19-.43.421v3.193c0 .23.193.42.428.42c.237 0 .43-.19.43-.42V5.395a.427.427 0 0 0-.428-.42zm3.913 0c-.237 0-.43.19-.43.421v1.978L7.85 5.145a.45.45 0 0 0-.338-.17a.42.42 0 0 0-.425.42v3.193c0 .23.19.42.427.42c.24 0 .43-.19.43-.42V6.62l1.665 2.22a.42.42 0 0 0 .348.167a.42.42 0 0 0 .43-.419V5.395a.43.43 0 0 0-.429-.42zm3.06 0h-1.627c-.238 0-.43.19-.43.421v3.193c0 .23.192.42.428.42h1.627c.238 0 .43-.19.43-.42a.424.424 0 0 0-.43-.421H11.82v-.754h1.197c.238 0 .43-.19.43-.42a.426.426 0 0 0-.43-.423H11.82v-.753h1.197a.425.425 0 0 0 .43-.422a.425.425 0 0 0-.428-.42z"/>
			</svg>
		</a>
		
		<a href={`https://facebook.com/sharer/sharer.php?u=${'https://kotablog.netlify.app/posts/'+post.id}&target="_blank"`}>
		<Icon name="mingcute:facebook-fill" class="size-10 p-2 rounded-full text-accent-one/50 bg-accent-one/10"></Icon>
		</a>
		<Icon name="mingcute:copy-2-line" class="size-10 p-2 rounded-full text-accent-one/50 bg-accent-one/10"></Icon>
		</div>
		<LikeButton slug={post.id} client:only/>
	</div>
	{
		(prevPost || nextPost) && (
			<nav class="flex flex-col items-center gap-x-4 font-medium text-accent mt-5 md:mt-10 gap-4">
				{prevPost && (
					<a class="waves font-bold text-textColor/50 me-auto py-4  inline-flex gap-8 w-full md:w-3/5 items-center rounded-xl bg-accent-two/10 px-10" data-astro-prefetch href={'/posts/'+prevPost.id}>
						<Icon name='mdi:chevron-left' class="size-6"/>{prevPost.data.title}
					</a>
				)}
				{nextPost && (
					<a class="waves font-bold text-textColor/50  ms-auto py-4  inline-flex gap-8 w-full md:w-3/5 items-center rounded-xl bg-accent-two/10  justify-end px-10" data-astro-prefetch href={'/posts/'+nextPost.id}>
						{nextPost.data.title}<Icon name='mdi:chevron-right' class="size-6"/>
					</a>
				)}
			</nav>
		)
	}
	<CommentsSection post_id={post.id} client:only />
	<RelatedPosts post={post} />
</BaseLayout>
<script data-astro-rerun>
	import ripple from 'ripple-effects-v2';
	ripple(".waves");
</script>
<script is:inline data-astro-rerun>
	import { Observer } from 'tailwindcss-intersect';
	Observer.start();
</script>
<!-- Copy code button -->
<script is:inline data-astro-rerun>
	// Wait for the content to fully load
	document.addEventListener("DOMContentLoaded", () => {
		// Find all pre blocks
		document.querySelectorAll("pre").forEach((pre) => {
			// Check if the button already exists
			if (!pre.querySelector(".copy-code")) {
				// Create the button
				const copyButton = document.createElement("button");
				copyButton.className =
				"absolute flex items-center justify-center bg-bgColor h-6 font-medium overflow-hidden rounded-md text-light hover:text-accent-two font-sans text-sm font-medium top-2 right-2";

				// Create the span element that will hold the button text
				const buttonText = document.createElement("span");
				buttonText.innerText = "Copy"; // Initial text
				buttonText.className = "flex items-center block w-full h-full px-2 bg-[var(--code-title-bg)]"; // Set the span to take up full width with background color

				copyButton.appendChild(buttonText); // Append span to the button

				// Add the button inside pre
				pre.appendChild(copyButton);

				// Event handler for copying text
				copyButton.addEventListener("click", async () => {
					const code = pre.querySelector("code")?.textContent;
					if (code) {
						await navigator.clipboard.writeText(code);
						buttonText.innerText = "Copied!"; // Change text to "Copied!"

						// After 1.5 seconds, change the text back to "Copy"
						setTimeout(() => {
							buttonText.innerText = "Copy";
						}, 1500);
					}
				});
			}
		});
	});
</script>

<script is:inline data-astro-rerun>
	const ANIMATION_DURATION = 300;
	// Get the button and panel elements
	const togglePanelBtn = document.getElementById("toggle-panel");
	const closePanelBtn = document.getElementById("close-panel");
	const seriesPanel = document.getElementById("series-panel");
	const togglePanelMobileBtn = document.getElementById("toggle-panel-mobile");

	// Ensure the seriesPanel exists
	if (!seriesPanel) {
		console.error("Element series-panel not found");
		throw new Error("series-panel is required");
	}

	// Function to check if the panel is visible
	const isPanelVisible = () => {
		const isScreenLg = window.matchMedia("(min-width: 1024px)").matches; // Large screens
		return (
			(isScreenLg && seriesPanel.classList.contains("lg:block")) ||
			(!isScreenLg && !seriesPanel.classList.contains("hidden"))
		);
	};

	// Function to hide the panel
	const hidePanel = () => {
		seriesPanel.classList.add("opacity-0", "-translate-x-full");
		setTimeout(() => {
			seriesPanel.classList.remove("block", "lg:block");
			seriesPanel.classList.add("hidden");
		}, ANIMATION_DURATION);
	};

	// Function to show the panel
	const showPanel = () => {
		seriesPanel.classList.remove("hidden");
		seriesPanel.classList.add("block", "lg:block");
		setTimeout(() => {
			seriesPanel.classList.remove("opacity-0", "-translate-x-full");
		}, 10);
	};

	// Common event handler for both buttons
	const togglePanel = () => {
		if (isPanelVisible()) {
			hidePanel(); // If visible, hide it
		} else {
			showPanel(); // If hidden, show it
		}
	};

	// Event handlers for both buttons
	if (togglePanelBtn) {
		togglePanelBtn.addEventListener("click", togglePanel);
	} else {
		console.error("Element toggle-panel not found");
	}

	if (togglePanelMobileBtn) {
		togglePanelMobileBtn.addEventListener("click", togglePanel);
	} else {
		console.error("Element toggle-panel-mobile not found");
	}

	if (closePanelBtn) {
		closePanelBtn.addEventListener("click", hidePanel);
	} else {
		console.error("Element close-panel not found");
	}
</script>

<script is:inline data-astro-rerun>
	// Get the button and panel elements
	const toggleTocBtn = document.getElementById('toggle-toc');
	const closeTocBtn = document.getElementById('close-toc');
	const tocPanel = document.getElementById('toc-panel');
	const toggleTocMobileBtn = document.getElementById("toggle-toc-mobile");

	// Check for the panel's presence (required for functionality)
	if (!tocPanel) {
		console.error('Element toc-panel not found');
		throw new Error('toc-panel is required');
	}

	// Function to check if the table of contents is visible
	const isTocVisible = () => {
		const isScreenMd = window.matchMedia("(min-width: 768px)").matches;
		return (
			(isScreenMd && tocPanel.classList.contains("md:block")) ||
			(!isScreenMd && !tocPanel.classList.contains("hidden"))
		);
	};

	// Function to hide the panel
	const hideToc = () => {
		tocPanel.classList.add('hidden');
		tocPanel.classList.remove('md:block');
	};

	// Function to show the panel
	const showToc = () => {
		tocPanel.classList.remove('hidden');
		tocPanel.classList.add('md:block');
	};

	// Common event handler for both buttons
	const toggleToc = () => {
		if (isTocVisible()) {
			hideToc(); // If visible, hide it
		} else {
			showToc(); // If hidden, show it
		}
	};
	
	// Add event handler for the toggle button
	if (toggleTocBtn) {
		toggleTocBtn.addEventListener("click", toggleToc);
	} else {
		console.error('Element toggle-toc not found');
	}

	// Add event handler for the toggle button (mobile)
	if (toggleTocMobileBtn) {
		toggleTocMobileBtn.addEventListener("click", toggleToc);
	} else {
		console.error('Element toggle-toc-mobile not found');
	}

	// Add event handler for the close button
	if (closeTocBtn) {
		closeTocBtn.addEventListener('click', hideToc);
	} else {
		console.error('Element close-toc not found');
	}
</script>

<script is:inline data-astro-rerun>
	// Wait for the content to fully load
	document.addEventListener("DOMContentLoaded", () => {
		const buttonsPanel = document.getElementById("buttons-panel");
		
		if (buttonsPanel) {
			buttonsPanel.classList.add("fixed");
			console.log("Class 'fixed' added to the buttons-panel element.");
		} else {
			console.error("Element with ID 'buttons-panel' not found.");
		}
	});
</script>

<!-- Scroll to top button -->
<script is:inline data-astro-rerun>
	const scrollBtn = document.getElementById("to-top-button") as HTMLButtonElement;
	const targetHeader = document.querySelector("header") as HTMLElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// Show the scroll to top button when the <header> is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>

<!-- REQUIRES IMPROVEMENT!!! -->
<!-- Menu button instead of the main menu -->
<!--
<script>
	document.addEventListener("DOMContentLoaded", () => {
		const menuButton = document.getElementById("toggle-navigation-menu");
		const navigationMenu = document.getElementById("menu");

		if (!menuButton || !navigationMenu) {
			console.error("Menu button or navigation menu is missing in the DOM.");
			return;
		}

		menuButton.addEventListener("click", () => {
			const isOpen = menuButton.getAttribute("aria-expanded") === "true";

			if (isOpen) {
				// Close the menu
				navigationMenu.classList.add("hidden");
			} else {
				// Open the menu
				navigationMenu.classList.remove("hidden");
			}

			// Update the button state
			menuButton.setAttribute("aria-expanded", (!isOpen).toString());
		});
	});
</script>
-->
